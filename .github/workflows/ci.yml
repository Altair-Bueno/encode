on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - "*"

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      powerset: ${{ steps.crate-info.outputs.powerset }}
      features: ${{ steps.crate-info.outputs.features }}
      msrv: ${{ steps.crate-info.outputs.msrv }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get crate information
        id: crate-info
        shell: python3 {0}
        run: |
          import itertools
          import tomllib
          import json
          from os import environ

          def powerset(features):
            return itertools.chain.from_iterable(
                itertools.combinations(features, r)
                for r in range(len(features)+1)
            )

          def flatten_dependencies(enables, tree):
            res = []
            for enable in enables:
                dependencies = tree.get(enable)
                if dependencies is None:
                    continue
                elif dependencies != []:
                    res += flatten_dependencies(dependencies, tree)
                res.append(enable)
            return res

          def is_disjoint_combination(enables, tree):
            l = flatten_dependencies(enables, tree)
            return len(l) == len(set(l))

          with open("Cargo.toml", "rb") as f:
            data = tomllib.load(f)

          msrv = data['package']['rust-version']
          features = list(data["features"].keys())
          powerset = [
            ','.join(combination)
            for combination in powerset(features)
            if is_disjoint_combination(combination, data["features"])
          ]

          with open(environ["GITHUB_OUTPUT"], "wt") as f:
            f.write(f"powerset={json.dumps(powerset)}\n")
            f.write(f"features={json.dumps(features)}\n")
            f.write(f"msrv={msrv}\n")

  rust-checks:
    runs-on: ubuntu-latest
    needs: define-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-matrix.outputs.powerset) }}
        toolchain:
          - stable
          - ${{ needs.define-matrix.outputs.msrv }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt,clippy
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.toolchain }}
      - name: Run tests
        run: cargo test --features '${{ matrix.features }}'
      - name: Run linter
        run: cargo clippy --features '${{ matrix.features }}'
      - name: Check formatting
        run: cargo fmt --all -- --check
