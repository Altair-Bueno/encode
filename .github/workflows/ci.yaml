name: "CI"

on:
  merge_group:
  workflow_dispatch:
  workflow_call:
  pull_request:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  define-feature-matrix:
    name: Define feature matrix
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.define-features.outputs.features }}

    steps:
      - id: define-features
        name: Define features
        run: |
          echo 'features=["", "default", "alloc", "arrayvec", "std,arrayvec", "alloc,arrayvec"]' >> "$GITHUB_OUTPUT"
  cargo-build:
    name: Cargo Build
    runs-on: ubuntu-latest
    needs: define-feature-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: cargo build
        run: |
          cargo b --workspace --all-targets --no-default-features --features=${{ matrix.features }}

  cargo-fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    needs: define-feature-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt

      - name: Rustfmt Check
        run: cargo fmt --all --check

  cargo-clippy:
    name: Cargo clippy
    runs-on: ubuntu-latest
    needs: define-feature-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy

      - name: Clippy Check
        run: |
          cargo clippy --workspace --all-targets --no-default-features --features=${{ matrix.features }} -- -Dwarnings

  cargo-doc:
    name: Cargo doc
    runs-on: ubuntu-latest
    needs: define-feature-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Cargo doc test
        run: |
          cargo doc --workspace --no-default-features --features=${{ matrix.features }}

  check-crate-type:
    uses: ./.github/workflows/crate_type.yaml

  cargo-test-doc:
    needs: [check-crate-type, define-feature-matrix]
    if: ${{ needs.check-crate-type.outputs.is_lib == 'true' }}
    name: Cargo test doc
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Cargo test doc
        run: |
          cargo test --doc --workspace --no-default-features --features=${{ matrix.features }}

  cargo-next-test:
    name: Cargo test
    runs-on: ubuntu-latest
    needs: define-feature-matrix
    strategy:
      matrix:
        features: ${{ fromJSON(needs.define-feature-matrix.outputs.features) }}

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Cargo test
        run: |
          cargo nextest run --workspace --all-targets --no-default-features --features=${{ matrix.features }} --no-tests=pass

  typos-cli:
    name: typos
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Typos
        uses: taiki-e/install-action@v2
        with:
          tool: typos-cli

      - name: run typos
        run: typos

  taplo-toml-fmt:
    name: taplo fmt
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: Install Taplo
        uses: taiki-e/install-action@v2
        with:
          tool: taplo-cli

      - name: Run Taplo
        id: taplo
        run: taplo fmt --check --diff

  markdownlint:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - name: markdownlint-cli2-action
        uses: DavidAnson/markdownlint-cli2-action@v19
        with:
          globs: "**/*.md"

  cargo-deny:
    uses: ./.github/workflows/cargo_deny.yaml

  check-msrv:
    uses: ./.github/workflows/check_msrv.yaml
